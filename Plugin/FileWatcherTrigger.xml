<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileWatcherTrigger</name>
    </assembly>
    <members>
        <member name="T:FileWatcherTrigger.FileWatcherTrigger">
             <summary>
             Löst bei Änderung an einer Datei (triggerParameters) das Event 'TriggerIt'
             aus. Implementiert die Schnittstelle 'INodeTrigger' aus 'LogicalTaskTree.dll', über
             die sich der LogicalTaskTree von 'Vishnu' in das Event einhängen und den Trigger
             starten und stoppen kann.
             </summary>
             <remarks>
             Autor: Erik Nagel
            
             30.12.2013 Erik Nagel: erstellt.
             29.03.2014 Erik Nagel: für die Verarbeitung von mehreren alternativen Pfaden erweitert.
             25.06.2016 Erik Nagel: Try-Catch in OnTriggerFired und NULL-Check in Info;
                                    bei Exception alle FileSystemWatcher canceln, auf null setzen
                                    und neu aufsetzen.
             25.07.2016 Erik Nagel: In foreach-Schleifen wegen thread-safety linq.ToList implementiert.
             28.07.2016 Erik Nagel: ToList reicht nicht wg. Empty List Fehler - Lock und Copy implementiert.
             13.08.2019 Erik Nagel: Zusätzlichen Timer implementiert.
             27.06.2021 Erik Nagel: auf neue Basisklasse TriggerBase angepasst.
             </remarks>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.Dispose">
            <summary>
            Öffentliche Methode zum Aufräumen.
            </summary>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.Dispose(System.Boolean)">
            <summary>
            Abschlussarbeiten, ggf. Timer zurücksetzen.
            </summary>
            <param name="disposing">False, wenn vom eigenen Destruktor aufgerufen.</param>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.Finalize">
            <summary>
            Destruktor
            </summary>
        </member>
        <member name="P:FileWatcherTrigger.FileWatcherTrigger.Info">
            <summary>
            Enthält weitergehende Informationen zum Trigger.
            Überschreibt TriggerBase.TriggerInfo um für diese Trigger-Variante
            spezifische Informationen auszugeben.
            </summary>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Startet den Trigger; vorher sollte sich der Consumer in TriggerIt eingehängt haben.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger aufruft.</param>
            <param name="triggerParameters">Zeit bis zum ersten Start und Intervall durch Pipe ('|') getrennt.
            Die Zeitangaben bestehen aus Einheit und Wert durch Doppelpunkt getrennt.
            Einheiten sind: "MS" Millisekunden, "S" Sekunden, "M" Minuten, "H" Stunden und "D" Tage.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
            <returns>True, wenn der Trigger durch diesen Aufruf tatsächlich gestartet wurde.</returns>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Stoppt den Trigger.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger definiert.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.#ctor">
            <summary>
            Konstruktor - initialisiert die Liste von FileWatchern.
            </summary>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.EvaluateParametersOrFail(System.Object@,System.Object)">
            <summary>
            Diese Routine wird von der Routine "Start" angesprungen, bevor der Trigger gestartet wird.
            Erweitert TriggerBase.EvaluateParametersOrFail; dort wird nur der Parameter "|UserRun"
            ausgewertet und die Variable "_isUserRun" entsprechend gesetzt.
            </summary>
            <param name="triggerParameters">Die von Vishnu weitergeleiteten Parameter aus der JobDescription.xml.</param>
            <param name="triggerController">Der Knoten, dem dieser Trigger zugeordnet ist.</param>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.OnTriggerFired(System.IO.FileSystemWatcher,System.Reactive.EventPattern{System.IO.FileSystemEventArgs})">
            <summary>
            Diese Routine löst das Trigger-Event aus.
            </summary>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.OnError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Wird ausgeführt, wenn im FileSystemWatcher eine Exception aufgetreten ist, z.B.
            Error: Watched directory not accessible at 21.06.2016 18:16:29
            Nicht genügend Systemressourcen, um den angeforderten Dienst auszuführen
            </summary>
            <param name="source">Der FileSystemWatcher</param>
            <param name="e">Zusatzinformationen zum Fehler (enthält die Exception).</param>
        </member>
        <member name="M:FileWatcherTrigger.FileWatcherTrigger.setControllerInfo(System.Object)">
            <summary>
            Erzeugt einen String mit Informationen über den aufrufenden
            TriggerController zu Logging-Zwecken.
            </summary>
            <param name="triggerController"></param>
        </member>
    </members>
</doc>
