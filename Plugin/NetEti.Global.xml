<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetEti.Global</name>
    </assembly>
    <members>
        <member name="T:NetEti.Globals.AssemblyLoader">
             <summary>
             Stellt Methoden für das dynamische Laden von
             Assemblies und das Instanziieren darin enthaltener Klassen
             zur Verfügung.
             </summary>
             <remarks>
             File: AssemblyLoader.cs
             Autor: Erik Nagel
            
             10.04.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.GetAssemblyLoader">
            <summary>
            Singleton-Provider - übernimmt Pfade zu Verzeichnissen, in denen zusätzlich
            nach Assemblies gesucht werden soll.
            </summary>
            <returns>Singleton-Instanz von AssemblyLoader</returns>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.GetLoadedAssemblies">
            <summary>
            Liefert eine Liste mit allen in der AppDomain geladenen Assemblies.
            </summary>
            <returns>Liste mit allen in der AppDomain geladenen Assemblies.</returns>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.DynamicLoadObjectOfTypeFromAssembly(System.String,System.Type)">
            <summary>
            Lädt ein Objekt vom übergebenen Typ aus der angegebenen Assembly dynamisch.
            Alle von der angegebenen Assembly referenzierten Assemblies werden zusätzlich
            auch in assemblyDirectories gesucht.
            </summary>
            <param name="assemblyPathName">Die Assembly, die das zu ladende Objekt publiziert.</param>
            <param name="objectType">Der Typ des aus der Assembly zu instanzierenden Objekts</param>
            <returns>Instanz aus der übergebenen Assembly vom übergebenen Typ oder null</returns>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.DynamicLoadAssembly(System.String)">
            <summary>
            Lädt die Assembly vom übergebenen Pfad.
            </summary>
            <param name="assemblyPath">Pfad der zu ladenden Assembly.</param>
            <returns>Geladene Assembly oder null</returns>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.dynamicLoadAssembly(System.String)">
            <summary>
            Lädt die Assembly vom übergebenen Pfad.
            </summary>
            <param name="assemblyPath">Pfad der zu ladenden Assembly.</param>
            <returns>Geladene Assembly oder null</returns>
        </member>
        <member name="M:NetEti.Globals.AssemblyLoader.#ctor">
            <summary>
            Privater Konstruktor.
            </summary>
        </member>
        <member name="T:NetEti.Globals.DictionaryThreadSafeCopy`2">
             <summary>
             Statische Helper-Klasse - stellt statische generische Methoden
             zur Verfügung, welche Dictionaries sperren und kopieren.
             </summary>
             <remarks>
             File: DictionaryThreadSafeCopy.cs
             Autor: Erik Nagel, NetEti
            
             09.08.2016 Erik Nagel, NetEti: erstellt
             </remarks>
             <typeparam name="T">Typ der IEnumerable-Keys.</typeparam> 
             <typeparam name="U">Typ der IEnumerable-Values.</typeparam> 
        </member>
        <member name="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Kopiert thread-safe IDictionary&lt;T, U&gt; source auf IDictionary&lt;T, U&gt; target.
            </summary>
            <param name="source">IDictionary vom Typ T, U.</param>
            <returns>Kopie von source als Dictionary vom Typ T, U.</returns>
        </member>
        <member name="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryKeysThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Kopiert thread-safe die Keys von IDictionary&lt;T, U&gt; source
            auf IEnumerable&lt;T&gt; target.
            </summary>
            <param name="source">IDictionary vom Typ T, U.</param>
            <returns>Kopie der Keys von source als List vom Typ T.</returns>
        </member>
        <member name="M:NetEti.Globals.DictionaryThreadSafeCopy`2.GetDictionaryValuesThreadSafeCopy(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Kopiert thread-safe die Values von IDictionary&lt;T, U&gt; source
            auf IEnumerable&lt;U&gt; target.
            </summary>
            <param name="source">IDictionary vom Typ T, U.</param>
            <returns>Kopie der Values von source als List vom Typ U.</returns>
        </member>
        <member name="T:NetEti.Globals.EnumerableThreadSafeCopy`1">
             <summary>
             Statische Helper-Klasse - stellt eine statische Methode
             "GetEnumerableThreadSafeCopy" zur Verfügung, welche generische
             Listen sperrt und kopiert.
             </summary>
             <remarks>
             File: EnumerableThreadSaveCopy.cs
             Autor: Erik Nagel, NetEti
            
             09.08.2016 Erik Nagel, NetEti: erstellt
             </remarks>
             <typeparam name="T">Typ eines konkreten IEnumerable-Elements.</typeparam> 
        </member>
        <member name="M:NetEti.Globals.EnumerableThreadSafeCopy`1.GetEnumerableThreadSafeCopy(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Kopiert thread-safe IEnumerable&lt;T&gt; source auf IEnumerable&lt;T&gt; target.
            </summary>
            <param name="source">IEnumerable vom Typ T.</param>
            <returns>Kopie von source als List vom Typ T.</returns>
        </member>
        <member name="T:NetEti.Globals.GenericNonSingletonProvider">
             <summary>
             Stellt generische Klassen mit private Standard-Konstruktor als Nicht-Singletons zur Verfügung.
             </summary>
             <remarks>
             File: GenericNonSingletonProvider.cs<br></br>
             Quelle: josupeit.com/Weblog/Informatik und Technik/C# und .NET im Allgemeinen/Implementierung des Singleton
                     mit kleineren Anpassungen von Erik Nagel, NetEti<br></br>
            <br></br>
             08.03.2012 Erik Nagel: erstellt<br></br>
             08.03.2012 Erik Nagel: Es werden jetzt nicht nur dann existierende Instanzen zurückgegeben,
                                    wenn sie genau den generischen Typ T haben, sondern auch, wenn sie von T
                                    abgeleitet sind. Dadurch kann zum Beispiel innerhalb eines Frameworks auf
                                    dort bekannte Basisklassen von unbekannten aber abgeleiteten Klassen als
                                    Singletons zugegriffen werden, auch wenn die von den Basisklassen abgeleiteten
                                    Klassen außerhalb des Frameworks erst instanziiert werden.<br></br>
             </remarks>
        </member>
        <member name="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1(System.Boolean@)">
            <summary>
            Liefert eine neue Instanz der gewünschten Klasse zurück.
            </summary>
            <typeparam name="T">Typ der angeforderten Klasse</typeparam>
            <param name="newInstance">Immer True.</param>
            <returns>Eine Instanz der angeforderten Klasse.</returns>
        </member>
        <member name="M:NetEti.Globals.GenericNonSingletonProvider.GetInstance``1">
            <summary>
            Liefert eine Instanz der gewünschten Klasse zurück.
            </summary>
            <typeparam name="T">Typ der angeforderten Klasse</typeparam>
            <returns>Eine neue Instanz der angeforderten Klasse.</returns>
        </member>
        <member name="T:NetEti.Globals.GenericSingletonProvider">
             <summary>
             Stellt generische Klassen als Singletons zur Verfügung. Hauptvorteil ist, dass die Nutzklassen selbst
                       keine statischen Elemente mehr enthalten müssen und somit prinzipiell vererbbar sind.
             </summary>
             <remarks>
             File: GenericSingletonProvider.cs<br></br>
             Quelle: josupeit.com/Weblog/Informatik und Technik/C# und .NET im Allgemeinen/Implementierung des Singleton
                     mit kleineren Anpassungen von Erik Nagel, NetEti<br></br>
            <br></br>
             08.03.2012 Erik Nagel: erstellt<br></br>
             08.03.2012 Erik Nagel: Es werden jetzt nicht nur dann existierende Instanzen zurückgegeben,
                                    wenn sie genau den generischen Typ T haben, sondern auch, wenn sie von T
                                    abgeleitet sind. Dadurch kann zum Beispiel innerhalb eines Frameworks auf
                                    dort bekannte Basisklassen von unbekannten aber abgeleiteten Klassen als
                                    Singletons zugegriffen werden, auch wenn die von den Basisklassen abgeleiteten
                                    Klassen außerhalb des Frameworks erst instanziiert werden.<br></br>
             01.05.2014 Erik Nagel: Aufruf von Global.DynamicIs(instance, typeof(T)) geändert in
                                    typeof(T).IsAssignableFrom(instance.GetType()).<br></br>
             19.11.2016 Erik Nagel: Prüfung auf öffentlichen Konstruktor deaktiviert.
             </remarks>
        </member>
        <member name="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1(System.Boolean@)">
            <summary>
            Liefert die einzige Instanz der gewünschten Klasse zurück.
            Beim ersten Aufruf wird diese Instanz voher erzeugt.
            </summary>
            <typeparam name="T">Typ der angeforderten Klasse</typeparam>
            <param name="newInstance">True, wenn die retournierte Instanz gerade neu erzeugt wurde.</param>
            <returns>Eine Instanz der angeforderten Klasse als Singleton</returns>
        </member>
        <member name="M:NetEti.Globals.GenericSingletonProvider.GetInstance``1">
            <summary>
            Liefert die einzige Instanz der gewünschten Klasse zurück.
            Beim ersten Aufruf wird diese Instanz voher erzeugt.
            </summary>
            <typeparam name="T">Typ der angeforderten Klasse</typeparam>
            <returns>Eine Instanz der angeforderten Klasse als Singleton</returns>
        </member>
        <member name="T:NetEti.Globals.GenericTree`1">
             <summary>
             Stellt einen generischen Baum zur Verfügung
             </summary>
             <remarks>
             File: GenericTree.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             </remarks>
             <typeparam name="T">Typ des konkreten Trees (von GenericTree abgeleitet).</typeparam> 
        </member>
        <member name="P:NetEti.Globals.GenericTree`1.Children">
            <summary>
            Liste der Kinder eines Knotens.
            </summary>
        </member>
        <member name="F:NetEti.Globals.GenericTree`1.Mother">
            <summary>
            Der Besitzer des Knoten.
            </summary>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.#ctor(NetEti.Globals.GenericTree{`0})">
            <summary>
            Konstruktor übernimmt das Mutter-Element.
            </summary>
            <param name="mother">Das Mutter-Element.</param>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.Traverse(System.Func{System.Int32,`0,System.Object,System.Object})">
            <summary>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            </summary>
            <param name="callback">Der für jeden Knoten aufzurufende Callback vom Typ Func&lt;int, T, object, object&gt;.</param>
            <returns>Das oberste UserObjekt für den Tree.</returns>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Func{System.Int32,`0,System.Object,System.Object},System.Object)">
            <summary>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            </summary>
            <param name="depth">Die Hierarchie-Ebene.</param>
            <param name="callback">Der für jeden Knoten aufzurufende Callback vom Typ Func&lt;int, T, object, object&gt;.</param>
            <param name="userParent">Ein User-Object, das rekursiv weitergeleitet und modifiziert wird.</param>
            <returns>Das oberste UserObjekt für den Tree.</returns>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.Traverse(System.Action{System.Int32,`0})">
            <summary>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            </summary>
            <param name="callback">Der für jeden Knoten aufzurufende Callback vom Typ Action&lt;int, T&gt;.</param>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.Traverse(System.Int32,System.Action{System.Int32,`0})">
            <summary>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            </summary>
            <param name="depth">Die Hierarchie-Ebene.</param>
            <param name="callback">Der für jeden Knoten aufzurufende Callback vom Typ Action&lt;int, T&gt;.</param>
        </member>
        <member name="M:NetEti.Globals.GenericTree`1.Climb2Top(System.Action{`0})">
            <summary>
            Hangelt sich durch den Baum nach oben (bis zur Root)
            und ruft für jeden Knoten die Action auf.
            </summary>
            <param name="callback">Der für jeden Knoten aufzurufende Callback vom Typ Action&lt;T&gt;.</param>
        </member>
        <member name="T:NetEti.Globals.Global">
             <summary>
             <para xml:lang="de">
             Globale Typen, Konstanten und statische Funktionen
             </para>
             <para xml:lang="en">
             Global types, constants and static functions
             </para>
             </summary>
             <remarks>
             <para xml:lang="de">
             File: Global.cs
             Autor: Erik Nagel, NetEti
            
             12.03.2012 Erik Nagel: erstellt.
             14.06.2012 Erik Nagel: Korrektur in GetUniversalName.
             13.08.2012 Erik Nagel: IsDate(string inputDate) implementiert.
             01.05.2014 Erik Nagel: DynamicIs(instance, typeof(T)) gestrichen, stattdessen kann
                                    typeof(T).IsAssignableFrom(instance.GetType()) eingesetzt werden.<br></br>
             </para>
             <para xml:lang="en">
             File: Global.cs
             Author: Erik Nagel, NetEti
            
             12.03.2012 Erik Nagel: created.
             14.06.2012 Erik Nagel: Correction in GetUniversalName.
             13.08.2012 Erik Nagel: IsDate(string inputDate) implemented.
             01.05.2014 Erik Nagel: DynamicIs(instance, typeof(T)) deleted, instead one can insert
                                    typeof(T).IsAssignableFrom(instance.GetType()).<br></br>
             </para>
             </remarks>
        </member>
        <member name="F:NetEti.Globals.Global.SaveColumnDelimiter">
            <summary>
            <para xml:lang="de">
            Trenner für String-Inhalte, welcher einerseits selbst nicht in
            Strings vorkommt und andererseits wie ein Leerzeichen dargestellt wird.
            </para>
            <para xml:lang="en">
            Delimiter for string-contents. This delimiter doesn`t appear in
            strings but behaves like a space.
            </para>
            </summary>
        </member>
        <member name="F:NetEti.Globals.Global.StandardCsvColumnDelimiter">
            <summary>
            <para xml:lang="de">
            Der Standard-Spaltentrenner in CSV-Dateien
            </para>
            <para xml:lang="en">
            Standard-column-delimiter in CSV-files
            </para>
            </summary>
        </member>
        <member name="M:NetEti.Globals.Global.StringToSecureString(System.String)">
            <summary>
            <para xml:lang="de">
            Wandelt einen übergebenen String in einen SecureString
            </para>
            <para xml:lang="en">
            Converts a given string to a SecureString
            </para>
            </summary>
            <param name="current">
            <para xml:lang="de">
            Ein String
            </para>
            <para xml:lang="en">
            A String
            </para>
            </param>
            <returns>
            <para xml:lang="de">
            Der entsprechende SecureString
            </para>
            <para xml:lang="en">
            The created SecureString
            </para>
            </returns>
        </member>
        <member name="M:NetEti.Globals.Global.GetUniversalName(System.String)">
            <summary>
            <para xml:lang="de">
            Konvertiert einen übergebenen absoluten Dateipfad in sein
            UNC-Äquivalent, wenn möglich.
            </para>
            <para xml:lang="en">
            Converts a given absolute file path into it's
            UNC-equivalent, if possible.
            </para>
            </summary>
            <param name="sFilePath">
            <para xml:lang="de">
            Der absolute (Netzwerk-)Pfad
            </para>
            <para xml:lang="en">
            The absolute (Network-)Path
            </para>
            </param>
            <returns>
            <para xml:lang="de">
            Der UNC-Pfad
            </para>
            <para xml:lang="en">
            The unc-path
            </para>
            </returns>
        </member>
        <member name="M:NetEti.Globals.Global.CompareVersion(System.String,System.String)">
            <summary>
            <para xml:lang="de">
            Vergleicht zwei Versionsstrings, die aus durch '.' separierten Zahlen bestehen,
            z.B.: 1.0.0.10 mit 1.0.0.9.
            </para>
            <para xml:lang="en">
            Compares two version-strings, consisting of '.' separated lines,
            i.e.: 1.0.0.10 mit 1.0.0.9.
            </para>
            </summary>
            <param name="version1">
            <para xml:lang="de">
            Versionsstring im Format 1.0.0.10.
            </para>
            <para xml:lang="en">
            Version-string of format 1.0.0.10.
            </para>
            </param>
            <param name="version2">
            <para xml:lang="de">
            Versionsstring im Format 1.0.0.9.
            </para>
            <para xml:lang="en">
            Version-string of format 1.0.0.9.
            </para>
            </param>
            <returns>
            <para xml:lang="de">
            Liefert 1 wenn Version 1 größer als Version 2 ist, 0 bei Gleichheit, ansonsten -1.
            </para>
            <para xml:lang="en">
            Returns 1 if version 1 is greater than version 2, zero if equal, -1 otherways
            </para>
            </returns>
        </member>
        <member name="M:NetEti.Globals.Global.UnicodeHexcodeToChar(System.String,System.String)">
            <summary>
            <para xml:lang="de">
            Wandelt eine Zeichenkette, die einen Unicode-Hexcode darstellt z.B.: 20AC (=> €) in das entsprechende Zeichen um. 
            </para>
            <para xml:lang="en">
            Converts a string, representing a hex-unicode character like 20AC, to ascii €.
            </para>
            </summary>
            <param name="unicodeHexcode">
            <para xml:lang="de">
            Der vierstellige Hexcode des Unicode-Zeichensatzes. Führende 0en müssen nicht angegeben werden.
            </para>
            <para xml:lang="en">
            Hex-unicode consisting of four characters like 20AC. Leading zeroes are optional.
            </para>
            </param>
            <param name="defaultValue">
            <para xml:lang="de">
            Der Standardwert, der zurückgegebenen wird, wenn es sich nicht um einen maximal vierselligen Hexcode handelt.
            </para>
            <para xml:lang="en">
            Default returned, if there was no conversion possible.
            </para>
            </param>
            <returns>
            <para xml:lang="de">
            Das Zeichen des Unicode-Zeichensatzes, das durch den Hexcode klassifiziert wird.
            </para>
            <para xml:lang="en">
            Ascii-equivalent to the given unicode-sequence.
            </para>
            </returns>
        </member>
        <member name="M:NetEti.Globals.Global.IsDate(System.String)">
            <summary>
            <para xml:lang="de">
            Returnt true, wenn der übergebene String ein gültiges Datum ist.
            </para>
            <para xml:lang="en">
            Returns true, if the given string is a valid date.
            </para>
            </summary>
            <param name="inputDate">
            <para xml:lang="de">
            Zu prüfender Datums-String
            </para>
            <para xml:lang="en">
            Date-string to be checked.
            </para>
            </param>
            <returns>
            <para xml:lang="de">
            Returnt true, wenn der übergebene String ein gültiges Datum ist.
            </para>
            <para xml:lang="en">
            Returns true, if the given string is a valid date.
            </para>
            </returns>
        </member>
        <member name="T:NetEti.Globals.IGetStringValue">
             <summary>
             Lesen von Values (string) über Keys (string).
             </summary>
             <remarks>
             File: IGetStringValue.cs<br></br>
             Autor: Erik Nagel, NetEti<br></br>
            <br></br>
             08.03.2012 Erik Nagel: erstellt.<br></br>
             29.07.2018 Erik Nagel: Description eingeführt.<br></br>
             </remarks>
        </member>
        <member name="M:NetEti.Globals.IGetStringValue.GetStringValue(System.String,System.String)">
            <summary>
            Liefert genau einen Wert zu einem Key. Wenn es keinen Wert zu dem
            Key gibt, wird defaultValue zurückgegeben.
            </summary>
            <param name="key">Der Zugriffsschlüssel (string)</param>
            <param name="defaultValue">Das default-Ergebnis (string)</param>
            <returns>Der Ergebnis-String</returns>
        </member>
        <member name="M:NetEti.Globals.IGetStringValue.GetStringValues(System.String,System.String[])">
            <summary>
            Liefert ein string-Array zu einem Key. Wenn es keinen Wert zu dem
            Key gibt, wird defaultValue zurückgegeben.
            </summary>
            <param name="key">Der Zugriffsschlüssel (string)</param>
            <param name="defaultValues">Das default-Ergebnis (string[])</param>
            <returns>Das Ergebnis-String-Array</returns>
        </member>
        <member name="P:NetEti.Globals.IGetStringValue.Description">
            <summary>
            Liefert einen beschreibenden Namen dieses StringValueGetters,
            z.B. Name plus ggf. Quellpfad.
            </summary>
        </member>
        <member name="T:NetEti.Globals.IGetValue">
             <summary>
             Lesen von Values (Typ) über Keys (string).
             </summary>
             <remarks>
             File: IGetValue.cs<br></br>
             Autor: Erik Nagel, NetEti<br></br>
            <br></br>
             23.04.2013 Erik Nagel: erstellt.<br></br>
             </remarks>
        </member>
        <member name="M:NetEti.Globals.IGetValue.GetValue``1(System.String,``0)">
            <summary>
            Liefert genau einen Wert zu einem Key. Wenn es keinen Wert zu dem
            Key gibt, wird defaultValue zurückgegeben.
            </summary>
            <param name="key">Der Zugriffsschlüssel (string)</param>
            <param name="defaultValue">Das default-Ergebnis (string)</param>
            <typeparam name="T">Typ des konkreten Values.</typeparam> 
            <returns>Der Ergebnis-String</returns>
        </member>
        <member name="M:NetEti.Globals.IGetValue.GetValues``1(System.String,``0[])">
            <summary>
            Liefert ein string-Array zu einem Key. Wenn es keinen Wert zu dem
            Key gibt, wird defaultValue zurückgegeben.
            </summary>
            <param name="key">Der Zugriffsschlüssel (string)</param>
            <param name="defaultValues">Das default-Ergebnis (string[])</param>
            <typeparam name="T">Typ der konkreten Values.</typeparam> 
            <returns>Das Ergebnis-String-Array</returns>
        </member>
        <member name="T:NetEti.Globals.IUndefinedElement">
            <summary>
            Leeres Interface zur Markierung von Klassenableitungen als undefined (vermeidet NULL in bestimmten Kontexten).
            </summary>
        </member>
        <member name="T:NetEti.Globals.ThreadInfos">
             <summary>
             Liefert textuelle Infos über den aktuellen Thread für Debug-Zwecke.
             </summary>
             <remarks>
             File: ThreadInfos.cs
             Autor: Erik Nagel
            
             28.09.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:NetEti.Globals.ThreadInfos.GetThreadInfos">
            <summary>
            Liefert textuelle Infos über den aktuellen Thread für Debug-Zwecke.
            </summary>
            <returns>String mit Informationen zum aktuellen Thread.</returns>
        </member>
        <member name="T:NetEti.Globals.ThreadLocker">
             <summary>
             Verwaltet ein statisches Dictionary von Namen und Lock-Objekten.
             Sperrt und entsperrt das einem Namen zugeordnete Objekt global.
             </summary>
             <remarks>
             File: ThreadLocker.cs
             Autor: Erik Nagel
            
             28.09.2013 Erik Nagel: erstellt
             </remarks>
        </member>
        <member name="M:NetEti.Globals.ThreadLocker.LockNameGlobal(System.String)">
            <summary>
            Sperrt ein dem übergebenen Namen intern zugeordnetes Objekt.
            Der Eintrag mit Namen und Objekt wird ggf. vorher neu erzeugt.
            </summary>
            <param name="name">Ein Name, der über ein zugeordnetes Objekt global gesperrt werden soll.</param>
        </member>
        <member name="M:NetEti.Globals.ThreadLocker.TryLockNameGlobal(System.String,System.Int32)">
            <summary>
            Versucht ein dem übergebenen Namen intern zugeordnetes Objekt zu sperren
            und retourniert true, wenn die Sperre geklappt hat.
            Der Eintrag mit Namen und Objekt wird ggf. vorher neu erzeugt.
            </summary>
            <param name="name">Ein Name, der über ein zugeordnetes Objekt global gesperrt werden soll.</param>
            <param name="waitMilliseconds">Anzahl Millisekunden, die maximal gewartet werden soll.</param>
            <returns>True wenn die Sperre geklappt hat</returns>
        </member>
        <member name="M:NetEti.Globals.ThreadLocker.UnlockNameGlobal(System.String)">
            <summary>
            Entsperrt ein dem übergebenen Namen intern zugeordnetes Objekt.
            </summary>
            <param name="name">Ein Name, dessen zugeordnetes Objekt global entsperrt werden soll.</param>
        </member>
    </members>
</doc>
