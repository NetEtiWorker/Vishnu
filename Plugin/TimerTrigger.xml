<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimerTrigger</name>
    </assembly>
    <members>
        <member name="T:TimerTrigger.TimerTrigger">
             <summary>
             Löst in regelmäßigen, konfigurierbaren Zeitabständen das beim Aufruf der "Start"-Routine
             übergebene Event 'triggerIt' aus.
             Implementiert die Schnittstelle 'INodeTrigger' aus 'Vishnu.Interchange.dll', über
             die sich der LogicalTaskTree von 'Vishnu' in das Event einhängen und den Trigger
             starten und stoppen kann.
             </summary>
             <remarks>
             Autor: Erik Nagel
            
             19.07.2013 Erik Nagel: erstellt.
             15.12.2020 Erik Nagel: Warte-Durchlauf bei Übergabe von "UserRun" als letztem Parameter implementiert.
             26.06.2021 Erik Nagel: auf neue Basisklasse TriggerBase angepasst.
             </remarks>
        </member>
        <member name="M:TimerTrigger.TimerTrigger.Start(System.Object,System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Startet den Trigger; vorher sollte sich der Consumer in TriggerIt eingehängt haben.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger aufruft.</param>
            <param name="triggerParameters">Zeit bis zum ersten Start und Intervall durch Pipe ('|') getrennt.
            Die Zeitangaben bestehen aus Einheit und Wert durch Doppelpunkt getrennt.
            Einheiten sind: "MS" Millisekunden, "S" Sekunden, "M" Minuten, "H" Stunden und "D" Tage.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
            <returns>True, wenn der Trigger durch diesen Aufruf tatsächlich gestartet wurde.</returns>
        </member>
        <member name="M:TimerTrigger.TimerTrigger.Stop(System.Object,System.Action{Vishnu.Interchange.TreeEvent})">
            <summary>
            Stoppt den Trigger.
            </summary>
            <param name="triggerController">Das Objekt, das den Trigger definiert.</param>
            <param name="triggerIt">Die aufzurufende Callback-Routine, wenn der Trigger feuert.</param>
        </member>
        <member name="M:TimerTrigger.TimerTrigger.#ctor">
            <summary>
            Standard Konstruktor.
            </summary>
        </member>
        <member name="M:TimerTrigger.TimerTrigger.EvaluateParametersOrFail(System.Object@,System.Object)">
            <summary>
            Diese Routine wird von der Routine "Start" angesprungen, bevor der Trigger gestartet wird.
            Erweitert TriggerBase.EvaluateParametersOrFail; dort wird nur der Parameter "|UserRun"
            ausgewertet und die Variable "_isUserRun" entsprechend gesetzt.
            </summary>
            <param name="triggerParameters">Die von Vishnu weitergeleiteten Parameter aus der JobDescription.xml.</param>
            <param name="triggerController">Der Knoten, dem dieser Trigger zugeordnet ist.</param>
        </member>
        <member name="M:TimerTrigger.TimerTrigger.OnTriggerFired(System.Int64)">
            <summary>
            Diese Routine löst das Trigger-Event aus.
            Für ein Setzen der Variablen "_lastStart" und "_nextStart" überschreibt diese Routine
            TriggerBase.OnTriggerFired.
            </summary>
            <param name="dummy">Aus Kompatibilitätsgründen, wird hier nicht genutzt.</param>
        </member>
        <member name="P:TimerTrigger.TimerTrigger._firstRun">
            <summary>
            Definierter Zeitpunkt für den ersten Start
            des zugeordneten INodeWorker oder null.
            </summary>
        </member>
        <member name="P:TimerTrigger.TimerTrigger._interval">
            <summary>
            Intervall für den wiederholten Start (Run)
            der zugeordneten INodeWorker oder null.
            </summary>
        </member>
    </members>
</doc>
