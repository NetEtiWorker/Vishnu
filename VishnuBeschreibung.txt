VishnuBeschreibung.txt, Stand: 17.05.2014 Erik Nagel

Dies ist noch keine Beschreibung! Dies sind bestenfalls ein paar Hinweise!

Vishnu enthält keine anwendungsspezifischen Elemente. Alles wird von außen definiert:
		...\JobName\JobDescription.xml oder ...\JobName.zip
				enthält die komplette Beschreibung des logischen Aufbaus des Verarbeitungs-Trees
				incl. der beteiligten Akteure wie Trigger, Checker, Worker und Logger.
				JobDescriptions können SubJobs enthalten; diese können sowohl inline, als auch
				per externer Referenz deklariert werden (rekursiv).
				Job-Verzeichnisse können gezippt vorliegen.
		...\JobName\Plugin
				enthält alle benötigten anwendungsspezifischen Exen und DLLs, die nicht standard sind und sich nicht im Verzeichnis ...\UserAssemblies befinden oder die diese Assemblies bewusst überdecken sollen.
				(Source Verzeichnisse für bisher entwickelte Plugins stehen unter Vishnu\LogicalTaskTree\PluginProjects\Projects)
				Anwendungsspezifische Exen und DLLs:
						Checker-dll: implementiert INodeChecker, liefert als Ergebnis null, true oder false plus ein beliebiges Return-Object, welches u.a. in größer-kleiner-Vergleichen Verwendung findet.
						Trigger-dll: implementiert INodeTrigger, startet Checker und/oder Worker, die diese referenzieren. Standard-Trigger sind TimerTrigger, FileWatcherTrigger und der interne TreeEventTrigger.
						Worker.exe: wird von Jobs oder Checkern bei bestimmten TreeEvents mit String-Parametern auf der Kommandozeile aufgerufen (fire and forget).
						Logger-dll: implementiert INodeLogger, kann für Logging-Zwecke in den Tree gehängt werden.
						ValueModifier-dll: implementiert IValueModifier, referenziert einen vorhandenen Checker oder ValueModifier und modifiziert dessen Return-Object.
		Checker mit gleichem Namen werden intern so abgebildet, dass nur der erste Checker ausgeführt wird und jeder weitere namensgleiche Checker als NodeConnector auf den ersten verweist.
Im Verzeichnis TestJobs stehen die Jobs (xmls plus Plugins) mit denen ich Vishnu teste.
Die TestJobs sind bewusst belastend und für verschiedene Szenarien ausgelegt.
Am besten hangelt man sich durch die TestJobs und Jobs, um einen ersten Eindruck von der Arbeit mit Vishnu zu bekommen.
Interessant sind im Besonderen:
	TestJobs\SnapshotTests - hier stehen Jobs, die die Skalierbarkeit von Vishnu demonstrieren sollen.
			Wenn man diese in beliebiger Reihenfolge startet (über TestJobs\Vishnu.bin\Vishnu.exe), synchronisieren sie sich miteinander.
	TestJobs\JobController_01 - ein erster Job zur Demonstration von Vishnu als Job-Steuerung.
			Ein einfacher Durchlauf funktioniert schon, mittendrin neu starten aber noch nicht.
			Die Anforderungen an Vishnu als Job-Controller sind in Teilen anders als die Anforderungen an Vishnu als Monitor.
			Darum will ich mich in meinem Urlaub kümmern.
			
Komplett-Builds können über Framework\rebuildall_Framework.bat und Vishnu\rebuildall_VishnuPlugins.bat
Verteilung der dlls und exen über Framework\copy_Framework_Assemblies.bat und Vishnu\copy_VishnuPlugins_Assemblies.bat
Das Projekt Vishnu selbst muss dann noch extra umgewandelt werden.

Vishnu verwendet seinerseits Framework (über Assemblies) und SyntaxParser.
Welche Logik-Konstrukte mit welcher Syntax unterstützt werden, kann man sich am besten im SyntaxParser-Projekt ansehen.